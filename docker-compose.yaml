services:
  # MongoDB
  mongodb:
    image: mongo:7.0
    container_name: gochat-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - gochat-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis
  redis:
    image: redis:7.2-alpine
    container_name: gochat-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gochat-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # MailHog (for email testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: gochat-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI port
    networks:
      - gochat-network
    environment:
      - MH_STORAGE=maildir
      - MH_MAILDIR_PATH=/maildir
    volumes:
      - mailhog_data:/maildir

  # Redis Commander (Redis Web UI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: gochat-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    networks:
      - gochat-network
    depends_on:
      redis:
        condition: service_healthy

  # Mongo Express (MongoDB Web UI)
  mongo-express:
    image: mongo-express:latest
    container_name: gochat-mongo-express
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123
      ME_CONFIG_MONGODB_URL: mongodb://admin:password123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
    networks:
      - gochat-network
    depends_on:
      mongodb:
        condition: service_healthy

  # Asynq Web UI (for monitoring job queues)
  asynqmon:
    image: hibiken/asynqmon:latest
    container_name: gochat-asynqmon
    restart: unless-stopped
    ports:
      - "8083:8080"
    environment:
      - REDIS_ADDR=redis:6379
    networks:
      - gochat-network
    depends_on:
      redis:
        condition: service_healthy

  # Go Chat Server
  gochat-server:
    build: 
      context: .
      dockerfile: dockerfile
    container_name: gochat-server
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - MONGO_URI=mongodb://admin:password123@mongodb:27017/chatdb?authSource=admin
      - DATABASE_NAME=chatdb
      - REDIS_ADDR=redis:6379
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
      - SMTP_USER=
      - SMTP_PASS=
      # Add environment for CORS (optional)
      - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      mailhog:
        condition: service_started
    networks:
      - gochat-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    volumes:
      - ./logs:/app/logs  # Mount logs directory

volumes:
  mongodb_data:
  redis_data:
  mailhog_data:

networks:
  gochat-network:
    driver: bridge
